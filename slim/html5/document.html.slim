doctype 5
html lang=(attr :lang, 'en' unless attr? :nolang)
  head
    meta http-equiv='Content-Type' content='text/html; charset=#{attr :encoding}'
    meta name='viewport' content='width=device-width, initial-scale=1.0'
    meta name='generator' content="Asciidoctor #{attr 'asciidoctor-version'}"
    - [:description, :author, :copyright].each do |key|
      - if attr? key
        meta name=key content=(attr key)
    title=doctitle
    - if Asciidoctor::DEFAULT_STYLESHEET_KEYS.include?(attr :stylesheet)
      - if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss)
        link rel='stylesheet' href=normalize_web_path(Asciidoctor::DEFAULT_STYLESHEET_NAME, (attr :stylesdir, ''))
      - else
        style=read_asset(Asciidoctor::DEFAULT_STYLESHEET_PATH)
    - elsif attr? :stylesheet
      - if attr? :linkcss
        link rel='stylesheet' href=normalize_web_path((attr :stylesheet), (attr :stylesdir, ''))
      - else
        style=read_asset(normalize_system_path((attr :stylesheet), (attr :stylesdir, '')), true)
    - case attr 'source-highlighter'
    - when 'coderay'
      - if (attr 'coderay-css', 'class') == 'class'
        / hackish, find a way to locate this function in a more generic namespace
        =Asciidoctor::HTML5::DocumentTemplate.default_coderay_stylesheet
    - when 'highlightjs'
      link rel='stylesheet' href="#{attr :highlightjsdir, 'http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3'}/styles/#{attr 'highlightjs-theme', 'default'}.min.css"
      script src="#{attr :highlightjsdir, 'http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3'}/highlight.min.js"
      script hljs.initHighlightingOnLoad()
    =docinfo
  body id=@id class=(attr :doctype) style=("max-width: #{attr 'max-width'};" if attr? 'max-width')
    - unless noheader
      / AsciiDoc leaves an empty header div even if there's no doctitle
      #header
        - if has_header?
          - unless notitle
            h1=@header.title
          - if attr? :author
            span#author=(attr :author)
            br
          - if attr? :email
            span#email=sub_macros(attr :email)
            br
          - if attr? :revnumber
            span#revnumber version #{attr :revnumber}#{',' if attr? :revdate}
            '
          - if attr? :revdate
            span#revdate=attr :revdate
          - if attr? :revremark
            br
            span#revremark=attr :revremark
        - if attr? :toc
          #toc class=(attr 'toc-class', 'toc')
            #toctitle=attr 'toc-title'
            / hackish, find a way to make the toc generator more generic
            / also need a no-indent mode
            =Asciidoctor::HTML5::DocumentTemplate.outline(self, (attr :toclevels, 2).to_i)
    #content=content
    - unless !footnotes? || attr?(:nofootnotes)
      #footnotes
        hr
        - footnotes.each do |fn|
          .footnote id='_footnote_#{fn.index}'
            <a href="#_footnoteref_#{fn.index}">#{fn.index}</a>. #{fn.text}
    #footer
      #footer-text
        - if attr? :revnumber
          | Version #{attr :revnumber}
          br
        | Last updated #{attr :docdatetime}
